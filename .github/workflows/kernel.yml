name: kernel
on:
  workflow_dispatch:
  schedule:
  - cron: "0 10 * * *"
jobs:
  matrix:
    name: matrix
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: generate matrix
      run: ./hack/ci/generate-matrix.sh
    - name: capture matrix
      id: capture-matrix
      run: >
        echo "matrix=$(cat target/matrix.json)" >> "${GITHUB_OUTPUT}"
    outputs:
      matrix: "${{ steps.capture-matrix.outputs.matrix }}"
  build:
    name: "build ${{ matrix.arch }} ${{ matrix.builds.version }}"
    needs: matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    env:
      TARGET_ARCH: "${{ matrix.arch }}"
      KERNEL_VERSION: "${{ matrix.builds.version }}"
      KERNEL_SRC_URL: "${{ matrix.builds.source }}"
    steps:
    - name: checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: install dependencies
      run: ./hack/ci/install-linux-deps.sh
    - name: build kernel
      run: ./hack/build.sh
      env:
        KERNEL_BUILD_JOBS: "5"
    - name: append tags to metadata
      run: >
        echo "KERNEL_TAGS=${{ join(matrix.builds.tags) }}" >> "target/metadata"
    - name: capture metadata
      id: capture-metadata
      run: >
        cat "target/metadata" >> "${GITHUB_OUTPUT}"
    - name: upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "kernel-${{ matrix.arch }}-${{ matrix.builds.version }}"
        path: "target/*"
        compression-level: 0
    outputs:
      arch: "${{ steps.capture-metadata.outputs.KERNEL_ARCH }}"
      version: "${{ steps.capture-metadata.outputs.KERNEL_VERSION }}"
      tags: "${{ steps.capture-metadata.outputs.KERNEL_TAGS }}"
  assemble:
    name: assemble
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "kernel-*"
        path: "target/kernels"
    - name: docker setup qemu
      uses: docker/setup-qemu-action@v3
    - name: docker setup buildx
      uses: docker/setup-buildx-action@v3
    - name: generate docker script
      run: ./hack/ci/generate-docker-script.sh ghcr.io/edera-dev/kernels-demo > target/build.sh
    - name: run docker script
      run: sh target/build.sh
